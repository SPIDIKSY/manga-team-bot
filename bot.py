import telebot
from telebot import types
from datetime import datetime
from flask import Flask
import os

# –°–æ–∑–¥–∞—ë–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞ —Å —Ç–≤–æ–∏–º —Ç–æ–∫–µ–Ω–æ–º
bot = telebot.TeleBot('7940514562:AAEejbBsPnmqFxpQj_T2iAUaSOOpFEuedfw')
MY_CHAT_ID = 1440226179  # –¢–≤–æ–π ID –¥–ª—è –∞–¥–º–∏–Ω-–º–µ–Ω—é –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫

# –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫
all_applications = []

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
applications = {}

# –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
ROLES = ["–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫", "–†–µ–¥–∞–∫—Ç–æ—Ä", "–¢–∞–π–ø–µ—Ä", "–ö–ª–∏–Ω–µ—Ä", "–î—Ä—É–≥–æ–µ"]

# –û–ø–∏—Å–∞–Ω–∏—è —Ä–æ–ª–µ–π
ROLE_DESCRIPTIONS = {
    "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫": "üìñ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –º–∞–Ω–≥–∏ —Å –æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ –¥—Ä—É–≥–æ–π.",
    "–†–µ–¥–∞–∫—Ç–æ—Ä": "‚úçÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥, —É–ª—É—á—à–∞–µ—Ç —Å—Ç–∏–ª—å.",
    "–¢–∞–π–ø–µ—Ä": "üñåÔ∏è –í—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞–Ω–≥–∏.",
    "–ö–ª–∏–Ω–µ—Ä": "üßπ –£–¥–∞–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —á–∏—Å—Ç–∏—Ç —Å–∫–∞–Ω—ã.",
    "–î—Ä—É–≥–æ–µ": "üîß –î—Ä—É–≥–∏–µ –∑–∞–¥–∞—á–∏ (—É–∫–∞–∂–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ)."
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞—è–≤–∫–∏
def create_application_text(app_data, include_timestamp=False):
    text = (f"üì® –ó–∞—è–≤–∫–∞:\n"
            f"üë§ Username: {app_data['username']}\n"
            f"‚úçÔ∏è –ò–º—è: {app_data['name']}\n"
            f"üé≠ –†–æ–ª—å: {app_data['role']}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {app_data['comment']}")
    if include_timestamp and 'timestamp' in app_data:
        text += f"\nüïí –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {app_data['timestamp']}"
    return text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def create_edit_buttons():
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("‚úçÔ∏è –ò–º—è", callback_data="edit_name"),
               types.InlineKeyboardButton("üé≠ –†–æ–ª—å", callback_data="edit_role"),
               types.InlineKeyboardButton("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="edit_comment"),
               types.InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="submit_application"))
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    if not message.from_user.username:
        bot.reply_to(message, "‚ùå –ü—Ä–∏–≤–µ—Ç! –£ —Ç–µ–±—è –Ω–µ—Ç username –≤ Telegram. "
                              "–î–æ–±–∞–≤—å –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (@username) –∏ –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å /start.")
        return
    
    markup = types.InlineKeyboardMarkup()
    start_button = types.InlineKeyboardButton("‚ú® –ù–∞—á–∞—Ç—å –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏", callback_data="start_application")
    markup.add(start_button)
    
    bot.reply_to(message, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞—è–≤–æ–∫ –≤ –∫–æ–º–∞–Ω–¥—É –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É –º–∞–Ω–≥–∏.\n"
                          "–ì–æ—Ç–æ–≤ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞–º? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!",
                          reply_markup=markup)
    applications[message.chat.id] = {'step': 'start', 'username': f"@{message.from_user.username}"}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–±—è)
@bot.message_handler(commands=['admin'])
def admin_menu(message):
    if message.chat.id != MY_CHAT_ID:
        bot.reply_to(message, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é!")
        return
    
    if not all_applications:
        bot.reply_to(message, "üìÇ –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
        return
    
    for idx, app in enumerate(all_applications, 1):
        app_text = create_application_text(app, include_timestamp=True)
        bot.send_message(message.chat.id, f"–ó–∞—è–≤–∫–∞ #{idx}\n{app_text}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    chat_id = call.message.chat.id
    
    if chat_id not in applications:
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start!")
        return

    if call.data == "start_application":
        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id,
                              text="üìù –û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è:")
        applications[chat_id]['step'] = 'name'

    elif call.data in ROLES:
        applications[chat_id]['role'] = call.data
        role_description = ROLE_DESCRIPTIONS.get(call.data, "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id,
                              text=f"‚úÖ –†–æ–ª—å –≤—ã–±—Ä–∞–Ω–∞: {call.data}\n"
                                    f"{role_description}\n\n"
                                    "–ù–∞–ø–∏—à–∏ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Å–µ–±–µ –∏–ª–∏ –ø–æ—á–µ–º—É —Ö–æ—á–µ—à—å –≤ –∫–æ–º–∞–Ω–¥—É:")
        applications[chat_id]['step'] = 'comment'

    elif call.data == "edit_name":
        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id,
                              text="üìù –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è:")
        applications[chat_id]['step'] = 'edit_name'

    elif call.data == "edit_role":
        markup = types.InlineKeyboardMarkup(row_width=2)
        for role in ROLES:
            markup.add(types.InlineKeyboardButton(role, callback_data=role))
        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id,
                              text="üé≠ –í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é —Ä–æ–ª—å:", reply_markup=markup)
        applications[chat_id]['step'] = 'edit_role'

    elif call.data == "edit_comment":
        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id,
                              text="üí¨ –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
        applications[chat_id]['step'] = 'edit_comment'

    elif call.data == "submit_application":
        applications[chat_id]['timestamp'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        application = create_application_text(applications[chat_id], include_timestamp=True)
        all_applications.append(applications[chat_id].copy())
        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id,
                              text=f"üéâ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n{application}")
        bot.send_message(MY_CHAT_ID, application)
        print(application)
        del applications[chat_id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def handle_text(message):
    chat_id = message.chat.id
    
    if chat_id not in applications:
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start!")
        return

    step = applications[chat_id]['step']

    if step == 'name':
        applications[chat_id]['name'] = message.text
        markup = types.InlineKeyboardMarkup(row_width=2)
        for role in ROLES:
            markup.add(types.InlineKeyboardButton(role, callback_data=role))
        bot.reply_to(message, f"‚úÖ –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {message.text}\n"
                              "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ä–æ–ª—å –≤ –∫–æ–º–∞–Ω–¥–µ:", reply_markup=markup)
        applications[chat_id]['step'] = 'role'

    elif step == 'comment':
        applications[chat_id]['comment'] = message.text
        application_text = create_application_text(applications[chat_id])
        markup = create_edit_buttons()
        bot.reply_to(message, f"{application_text}\n\n"
                              "–ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å, –≤—ã–±–µ—Ä–∏ –Ω–∏–∂–µ:",
                              reply_markup=markup)
        applications[chat_id]['step'] = 'preview'

    elif step == 'edit_name':
        applications[chat_id]['name'] = message.text
        application_text = create_application_text(applications[chat_id])
        markup = create_edit_buttons()
        bot.reply_to(message, f"‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {message.text}\n\n"
                              f"{application_text}\n\n"
                              "–ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å, –≤—ã–±–µ—Ä–∏ –Ω–∏–∂–µ:",
                              reply_markup=markup)
        applications[chat_id]['step'] = 'preview'

    elif step == 'edit_comment':
        applications[chat_id]['comment'] = message.text
        application_text = create_application_text(applications[chat_id])
        markup = create_edit_buttons()
        bot.reply_to(message, f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω: {message.text}\n\n"
                              f"{application_text}\n\n"
                              "–ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å, –≤—ã–±–µ—Ä–∏ –Ω–∏–∂–µ:",
                              reply_markup=markup)
        applications[chat_id]['step'] = 'preview'

    else:
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º! "
                              "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å /start.")

# Flask –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
@app.route('/')
def home():
    return "Bot is running!"

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ polling-—Ä–µ–∂–∏–º–µ
bot.remove_webhook()
bot.polling()
